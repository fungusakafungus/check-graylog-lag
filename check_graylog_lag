#!/usr/bin/env python
# coding: utf-8
"""
Check graylog lag, ffs
"""

import requests
import dateutil.parser
import datetime
import sys
import socket
import argparse

HOSTNAME = socket.gethostname()
HOSTNAME = 'localhost'
GRAYLOG_URL = 'http://%s:12900/search/universal/relative?query=*&range=3600&limit=1' % HOSTNAME #  noqa


def get_lag():
    r = requests.get(
        GRAYLOG_URL,
        auth=('jimdodev', 'jimdodev'),
        headers={'Accept': 'application/json'},
    )
    r.raise_for_status()
    r.encoding = 'utf-8'
    messages = r.json()['messages']
    if not messages:
        return 3600
    ts = messages[0]['message']['timestamp']
    parsed_ts = dateutil.parser.parse(ts)
    now_tz = datetime.datetime.now(parsed_ts.tzinfo)

    lag = int((now_tz - parsed_ts).total_seconds())

    return lag


import nagiosplugin


class Graylog(nagiosplugin.Resource):

    def probe(self):
        return [nagiosplugin.Metric('lag', get_lag(), 's', context='lag')]


@nagiosplugin.guarded
def main():
    argp = argparse.ArgumentParser(description=__doc__)
    argp.add_argument('-w', '--warning', metavar='RANGE', default='0:300',
                      help='return warning if lag is outside RANGE')
    argp.add_argument('-c', '--critical', metavar='RANGE', default='0:600',
                      help='return critical if lag is outside RANGE')
    argp.add_argument('-v', '--verbose', action='count', default=0,
                      help='increase output verbosity (use up to 3 times)')
    args = argp.parse_args()
    check = nagiosplugin.Check(
        Graylog(),
        nagiosplugin.ScalarContext('lag', args.warning, args.critical),
        )
    check.main(verbose=args.verbose)



if __name__ == '__main__':
    main()

